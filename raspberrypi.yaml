{{- $firmware_version := or .firmware_version "master" -}}
{{- $architecture := or .architecture "arm64" -}}
{{- $image := or .image "ubuntu-touch-raspberrypi.img" -}}
{{- $debug := or .debug "on" -}}

architecture: {{ $architecture }}
actions:
# Include mainline-rootfs-core.yaml and in that file mainline-rootfs-mods.yaml is included
  - action: recipe
    description: Setup core rootfs
    recipe: mainline-rootfs-core.yaml
    variables:
      architecture: {{ $architecture }}
      debug: {{ $debug }}
      # Add recent fix from mainline-generic.yaml
      imagesuffix: -mainline-edge

  # Add the linux-firmware package
  - action: recipe
    description: Setup core rootfs
    recipe: mainline-rootfs-firmware.yaml
    variables:
      architecture: {{ $architecture }}

# cp root/etc/mke2fs.conf /etc/mke2fs.conf
  - action: run
    description: Copy mke2fs config
    script: scripts/copy-rootfs-mke2fs.sh

# Create image partitions for the image.
# /boot/firmware for the device tree blobs and so on. The Device Tree Blob gets loaded by the bootloader and parsed bythe kernel at boot time.
# / for the linux filesystem
  - action: image-partition
    imagename: {{ $image }}
    imagesize: 4GB
    partitiontype: msdos
    mountpoints:
      - mountpoint: /
        partition: root
      - mountpoint: /boot/firmware
        partition: firmware
    partitions:
      - name: firmware
        fs: fat32
        start: 0%
        end: 200MB
      - name: root
        fs: ext4
        start: 200MB
        end: 100%
        flags: [ boot ]

# Deploying filesystem into image
  - action: filesystem-deploy
    description: Deploying filesystem into image

# Setting egl libs to use mesa (https://www.mesa3d.org/egl.html)
  - action: run
    chroot: true
    description: Setting egl libs to use mesa
    script: scripts/enable-mesa.sh

# Add firmware and kernel
  - action: run
    chroot: true
    description: Add firmware and kernel
    script: scripts/add-rpi-firmware.sh

# Copy raspberry-pi folder with cmdline.txt and config.txt in /boot/firmware/
  - action: overlay
    source: raspberry-pi/
    destination: /

# Depmod program to generate modules.dep and map files of the frimware.
#"$(find /lib/modules -type d -name "*-v8+" | grep -oE "[^/]+$")" -> looks like "4.19.73-v8+" depending on the github version
  - action: run
    chroot: true
    command: depmod -a "$(find /lib/modules -type d -name "*-v8" | grep -oE "[^/]+$")"

# The update-initramfs script manages your initramfs images on your local box. It keeps track of the existing initramfs archives in /boot.
# -c This mode creates a new initramfs.
# -k Set the specific kernel version for whom the initramfs will be generated.
  - action: run
    chroot: true
    command: kernelversion=$(find /lib/modules -type d -name "*-v8" | grep -oE "[^/]+$") && update-initramfs -c -k "$kernelversion" -b /boot/firmware && sed -i "s/initrd.img/initrd.img-$kernelversion/g" /boot/firmware/config.txt

  - action: run
    chroot: true
    description: Set uart tty
    label: uart
    command: sed -i 's/ttyS0/ttyAMA0/g' /etc/init/ttyS0.conf

  - action: recipe
    description: Polish the image
    recipe: polish.yaml
    variables:
      architecture: {{ $architecture }}
      image: {{ $image }}
