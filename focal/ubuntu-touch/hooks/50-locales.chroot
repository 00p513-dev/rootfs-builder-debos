#!/usr/bin/python3
#
# This script adds locales to the system by configuring a related debconf
# question. This is preferred over installing Ubuntu language packs because
# they include translations for many packages are not used in Ubuntu Touch.
#
# Locales are selected based on the translation coverage of the Lomiri project
# on Weblate.  Specifically, if the translation coverage of the language of a
# locale is equal or higher than 70% the corresponding locale is added.
#


import os
import pprint
import requests
import subprocess
import logging
from pathlib import Path


class Locale:
    # format: language[_territory][.codeset][@modifier]
    OPTIONAL_PARTS = (("territory", "_"), ("codeset", "."), ("modifier", "@"))

    def __init__(self, s):
        for name, delim in reversed(self.OPTIONAL_PARTS):
            try:
                s, value = s.rsplit(delim, 1)
            except ValueError:
                value = None
            setattr(self, name, value)
        self.language = s

    def __str__(self):
        result = [self.language]
        for name, delim in self.OPTIONAL_PARTS:
            value = getattr(self, name)
            if value:
                result.append(delim)
                result.append(value)
        return "".join(result)


def select_locales(threshold=0.0):
    logging.debug("fetching language data from hosted.weblate.org")
    r = requests.get(
        "https://hosted.weblate.org/api/projects/lomiri/languages/"
    )
    r.raise_for_status()
    lang_coverage = {l["code"]: l["translated_percent"] for l in r.json()}

    selected = []
    with open("/usr/share/i18n/SUPPORTED") as f:
        for line in f:
            s, codeset = line.split()

            # only UTF-8 locales are supported
            if codeset != "UTF-8":
                continue

            l = Locale(s)
            # English does not require translation and is always included,
            # otherwise discard languages which do not meet the translation
            # coverage threshold
            try:
                if (l.language != "en" and
                    lang_coverage[l.language] < threshold):
                    logging.debug(f"discarding {l} which does not meet the "
                                  f"threshold ({lang_coverage[l.language]}%)")
                    continue
            except KeyError:
                logging.debug(f"discarding {l} without translations")
                continue
            logging.debug(f"selecting {l}")
            selected.append(l)

    return selected


def main():
    logging.basicConfig(level=logging.DEBUG)

    # select locales with at least 70% coverage
    selected = select_locales(70.0)

    # remove this file, as otherwise locales's config script will pick this up
    # instead of the values we set below
    Path("/etc/locale.gen").unlink(missing_ok=True)

    debconf_locales = ", ".join([f"{l} UTF-8" for l in selected])
    debconf_selection = (f"locales\tlocales/locales_to_be_generated\t"
                         f"multiselect\t{debconf_locales}")

    env = {
        "PATH": os.environ["PATH"],
        "DEBIAN_FRONTEND": "noninteractive",
    }
    subprocess.run(
        ["/usr/bin/debconf-set-selections", "--verbose"],
        env=env,
        input=debconf_selection,
        encoding="utf-8",
        check=True
    )
    subprocess.run(
        ["/usr/sbin/dpkg-reconfigure", "locales"],
        env=env,
        check=True
    )

    # create language pack directories for accountsservice (see
    # https://gitlab.com/ubports/development/core/focal-projectmanagement-missing-packages/-/issues/82)
    base_path = Path("/usr/share/locale-langpack")
    for p in set(base_path / l.language for l in selected):
        logging.debug(f"creating directory {p}")
        p.mkdir(parents=True, exist_ok=True)


if __name__ == "__main__":
    main()
